// –ú–æ–¥—É–ª—å 7. –ó–∞–Ω—è—Ç—Ç—è 13. Events
// Example 1 - Color Palete
// const colorPalette = document.querySelector('.color-palette');
// const output = document.querySelector('.output');
// const bodyRef = document.querySelector('body');

// colorPalette.addEventListener('click', selectColor);

// createPaletteItems();

// function selectColor(event) {
// if (event.target.tagName !== "button") {
//     return
// }

//     const selectedColor = event.target.dataset.color;
//     bodyRef.style.backgroundColor = selectColor;

//     console.log(event.target)
// }

// function createPaletteItems() {

//     const arrayPalette = [];
//     let numberOfColors = getRandomInt(2,15);
//     let randomColor = getRandomColor();

//     for(let i=0; i <=numberOfColors; i +=1) {

//         const newEl =document.createElement('button');
//         newEl.style.background = randomColor();
//         newEl.type = 'button';
//         newEl.classList.add('item');

//         newEl.dataset.color = randomColor();
//         arrayPalette.push(newEl);
        

//     }
// return arrayPalette
// }

// colorPalette.append(...createPaletteItems)

// function getRandomColor() {
//   return `#${getRandomHex()}${getRandomHex()}${getRandomHex()}`;
// }

// function getRandomHex() {
//   return Math.round(Math.random() * 256)
//     .toString(16)
//     .padStart(2, '0');
// }

// function getRandomInt(min, max) {
//     min = Math.ceil(min);
//     max = Math.floor(max);
//     return Math.floor(Math.random() * (max - min)) + min; 
// }  


// Example 2 - Todo List
// This todo list design is pure css. The css and html are ready, but we need to code the Javascript part of the application. Use html from file todo_list.html.

// As you can see, when you initially run, the ability to delete or add items to the to-do list does not yet exist!

// üìù Instructions: Please add the "delete task" and "add task" functionality. üí° Hints: Analize the HTML code, how the list is designed and built, what do you have to add into the HTML if you want a new item appear inside the list?

// If we were to delete any particular element, we would have to add a listener to the click handler on the trash icon and then delete the entire li in which the icon.

// You don't have to edit anything from the HTML nor the CSS, only the javascript!

// const taskInput = document.getElementById('new-task'); //input to create new task.
// const addButton = document.querySelector('button.add'); //add button
// const tasksHolder = document.getElementById('tasks-list'); //ul of todos
// // const editButton = document.querySelector('button.edit'); //first button
// // const deleteButton = document.querySelectorAll('button.delete'); //first button
// const createNewTaskElement = newTodo => {
//   const markUp = ` <li>
//       <input type="checkbox" />
//       <label>${newTodo}</label>
//       <input type="text" value="${newTodo}" />
//       <button class="edit">Edit</button>
//       <button class="delete">Delete</button>
//     </li>`;
//   tasksHolder.insertAdjacentHTML('afterbegin', markUp);
// };
// const addTask = () => {
//   const taskString = taskInput.value;
//   createNewTaskElement(taskString);
//   taskInput.value = '';
// };
// const editTask = event => {
//   const liEl = event.target.parentNode;
//   if (event.target.classList.contains('edit')) {
//     const inputToDo = liEl.querySelector('input[type="text"]');
//     const toDoLabel = liEl.querySelector('label');
//     const toDoEditButton = liEl.querySelector('button.edit');
//     if (!liEl.classList.contains('editMode')) {
//       inputToDo.value = toDoLabel.textContent;
//       toDoEditButton.textContent = 'Save';
//     } else {
//       toDoEditButton.textContent = 'Edit';
//       toDoLabel.textContent = inputToDo.value;
//     }
//     liEl.classList.toggle('editMode');
//   }
// };
// const deleteTask = () => {};
// addButton.addEventListener('click', addTask);
// tasksHolder.addEventListener('click', editTask);
// tasksHolder.addEventListener('click', deleteTask);const taskInput = document.getElementById('new-task'); //input to create new task.
// const addButton = document.querySelector('button.add'); //add button
// const tasksHolder = document.getElementById('tasks-list'); //ul of todos
// // const editButton = document.querySelector('button.edit'); //first button
// // const deleteButton = document.querySelectorAll('button.delete'); //first button
// const createNewTaskElement = newTodo => {
//   const markUp = ` <li>
//       <input type="checkbox" />
//       <label>${newTodo}</label>
//       <input type="text" value="${newTodo}" />
//       <button class="edit">Edit</button>
//       <button class="delete">Delete</button>
//     </li>`;
//   tasksHolder.insertAdjacentHTML('afterbegin', markUp);
// };
// const addTask = () => {
//   const taskString = taskInput.value;
//   createNewTaskElement(taskString);
//   taskInput.value = '';
// };
// const editTask = event => {
//   const liEl = event.target.parentNode;
//   if (event.target.classList.contains('edit')) {
//     const inputToDo = liEl.querySelector('input[type="text"]');
//     const toDoLabel = liEl.querySelector('label');
//     const toDoEditButton = liEl.querySelector('button.edit');
//     if (!liEl.classList.contains('editMode')) {
//       inputToDo.value = toDoLabel.textContent;
//       toDoEditButton.textContent = 'Save';
//     } else {
//       toDoEditButton.textContent = 'Edit';
//       toDoLabel.textContent = inputToDo.value;
//     }
//     liEl.classList.toggle('editMode');
//   }
// };
// const deleteTask = (event) => {
//     if(event.target.classList.contains("delete")) {
//     const liEl = event.target.parentNode;
//     liEl.remove()
// }
// };
// addButton.addEventListener('click', addTask);
// tasksHolder.addEventListener('click', editTask);
// tasksHolder.addEventListener('click', deleteTask);


// Example 3 - Quiz
// –°—Ç–≤–æ—Ä–∏ —Ñ–æ—Ä–º—É –æ–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç. –ö–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äì —Ü–µ —Å–µ–∫—Ü—ñ—è —Ñ–æ—Ä–º–∏, –¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ –≥—Ä—É–ø–æ—é —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫.

// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç—É —Ç–∞ –Ω–∞–±—ñ—Ä –ø–∏—Ç–∞–Ω—å –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –æ–±'—î–∫—Ç—ñ, —â–æ –µ–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ —Ñ–∞–π–ª—É quiz-data.js. –ö–æ–∂–µ–Ω –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ–±'—î–∫—Ç–æ–º –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// question - —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è
// choices - –º–∞—Å–∏–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
// answer - —ñ–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –º–∞—Å–∏–≤—É choices
// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ç–∫—É —Ñ–æ—Ä–º–∏ –∑–∞ —Ü–∏–º–∏ –¥–∞–Ω–∏–º–∏.

// –ü—Ä–∏ —Å–∞–±–º–∏—Ç–µ —Ñ–æ—Ä–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä –Ω–∞ —Å–∫—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ –≤–∏–≤–µ–¥–∏ (–º–æ–∂–Ω–∞ –ø—ñ–¥ —Ñ–æ—Ä–º–æ—é) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö —á–∏ –Ω–µ–≤–¥–∞—á—É. –£—Å–ø—ñ—à–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –≤–≤–∞–∂–∞—î—Ç—å—Å—è –ø—Ä–∏ 80% –∞–±–æ –±—ñ–ª—å—à–µ –≤—ñ—Ä–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.

// HTML-—Ä–æ–∑–º—ñ—Ç–∫–∞
// –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ä–æ–∑–º—ñ—Ç–∫–∞ —É HTML-–¥–æ–∫—É–º–µ–Ω—Ç—ñ —Ç—É—Ç quiz.html

// –ö–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–µ –Ω–∞—Å—Ç—É–ø–Ω–æ—é HTML-—Ä–æ–∑–º—ñ—Ç–∫–æ—é. –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –í–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –¥–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è. –ü–æ–¥—É–º–∞–π, —â–æ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∏ name —Ç–∞ value —Ä–∞–¥—ñ–æ–∫–Ω–æ–ø–æ–∫.

// ``html

// 1. –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è
// –í—ñ–¥–ø–æ–≤—ñ–¥—å 1
// –í—ñ–¥–ø–æ–≤—ñ–¥—å 2
// ````
// const form = document.querySelector('#form');
// const button = document.querySelector('#btn');

// form.addEventListener('submit', checkAnswers);

// function createQuizeMarkup({ title, questions }) {}

// function markupForChoise(choices, i) {}

// //—Ç—É—Ç —É —Ñ–æ—Ä–º—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞—à—É —Å—Ç–≤–æ—Ä–µ–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó createQuizeMarkup(quiz)

// function checkAnswers(event) {
//   //–≤–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏

//   //–≤–∏—Ç—è–≥—É—î–º–æ –∑ –Ω–∞—à–æ–≥–æ quiz –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —ñ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —ó—Ö –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥—ñ–∑–Ω–∞—î–º–æ—Å—è –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤–∞, –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç–∞ —É %

//   // –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å–∞—Ç—É —Ç–µ—Å—Ç–∞
//   const result = Math.round((total / correctAnswers.length) * 100);

//   let message;
//   if (result >= 80) {
//     message = `–ú–æ–ª–æ–¥–µ—Ü—å! –¢—ã –Ω–∞–±—Ä–∞–≤ ${result} %`;
//   } else {
//     message = `–í—á–∏ —â–µ! –¢—ã –Ω–∞–±—Ä–∞–≤ ${result} %`;
//   }

//   //–∑—Ä–æ–±–∏ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—é —ñ –≤–∏–≤–µ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –π–æ–≥–æ —Ä—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø—ñ–¥ –∫–Ω–æ–ø–∫–æ—é —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ (message)
// }